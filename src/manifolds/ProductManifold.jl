#
#      Productmanifold – the manifold generated by the product of manifolds.
#
# Manopt.jl, R. Bergmann, 2018-06-26
import Base: exp, log, show

export ProductManifold, ProdMPoint, ProdTVector
export distance, dot, exp, log, manifoldDimension, norm, parallelTransport
export show, getValue
doc"""
    ProductManifold{M<:Manifold} <: Manifold
a product manifold $\mathcal M = \mathcal N_1\times\mathcal N_2\times\cdots\times\mathcal N_m$,
$m\in\mathbb N$,
concatinates a set of manifolds $\mathcal N_i$, $i=1,\ldots,m$, into one using
the sum of the metrics to impose a metric on this manifold. The manifold can
also be an arbitrary Array of manifolds, not necessarily only a vector.
Its abbreviation is `Prod`.
"""
struct ProductManifold <: Manifold
  name::String
  manifolds::Array{Manifold}
  dimension::Int
  abbreviation::String
  ProductManifold(mv::Array{Manifold}) = new("ProductManifold",
    mv,prod(manifoldDimension.(mv)),string("Prod(",join([m.abbreviation for m in mv],", "),")") )
end
doc"""
    ProdMPoint <: MPoint
A point on the [`ProductManifold`](@ref) $\mathcal M = \mathcal N_1\times\mathcal N_2\times\cdots\times\mathcal N_m$,$m\in\mathbb N$,
represented by a vector or array of [`MPoint`](@ref)s.
"""
struct ProdMPoint <: MPoint
  value::Array{MPoint}
  ProdMPoint(v::Array{MPoint}) = new(v)
end
getValue(x::ProdMPoint) = x.value
doc"""
    ProdTVector <: TVector
A tangent vector in the product of tangent spaces of the [`ProductManifold`](@ref)
$T\mathcal M = T\mathcal N_1\times T\mathcal N_2\times\cdots\times T\mathcal N_m$,$m\in\mathbb N$,
represented by a vector or array of [`TVector`](@ref)s.
"""
struct ProdTVector <: TVector
  value::Array{TVector}
  ProdTVector(value::Array{TVector}) = new(value);
end
getValue(ξ::ProdTVector) = ξ.value
# Functions
# ---
"""
    addNoise(M,x,δ)
computes a vectorized version of addNoise, and returns the noisy [`ProdMPoint`](@ref).
"""
addNoise(M::ProductManifold, x::ProdMPoint,σ) = ProdMPoint([addNoise.(M.manifolds, getValue.(x),σ)])
"""
    distance(M,x,y)
computes a vectorized version of distance, and the induced norm from the metric [`dot`](@ref).
"""
distance(M::ProductManifold, x::ProdMPoint, y::ProdMPoint) = sqrt(sum( distance.(M.manifolds, getValue(x), getValue(y) ).^2 ))
"""
    dot(M,x,ξ,ν)
computes the inner product as sum of the component inner products on the [`ProductManifold`](@ref).
"""
dot(M::ProductManifold, x::ProdMPoint, ξ::ProdTVector, ν::ProdTVector) = sum(dot.(M.manifolds, getValue(x), getValue(ξ), getValue(ν) ));
"""
    exp(M,x,ξ)
computes the product exponential map on the [`ProdManifold`](@ref) and returns the corresponding [`ProdMPoint`](@ref).
"""
exp(M::ProductManifold, x::ProdMPoint,ξ::ProdTVector,t::Number=1.0) = ProdMPoint( exp.(M.manifolds, getValue(x), getValue(ξ)) )
"""
   log(M,x,y)
computes the product logarithmic map on the [`ProdManifold`](@ref) and returns the corresponding [`ProdTVector`](@ref).
"""
log(M::ProductManifold, x::ProdMPoint,y::ProdMPoint) = ProdTVector(log.(M.manifolds, getValue(x), getValue(y) ))
"""
    manifoldDimension(x)
returns the (product of) dimension(s) of the [`ProdManifold`](@ref) the [`ProdMPoint`](@ref)`x` belongs to.
"""
manifoldDimension(x::ProdMPoint) =  prod( manifoldDimension.( getValue(x) ) )
"""
    manifoldDimension(M)
returns the (product of) dimension(s) of the [`ProdManifold`](@ref)` M`.
"""
manifoldDimension(M::ProductManifold) = prod( manifoldDimension.(M.manifolds) )
"""
    norm(M,x,ξ)
norm of the [`ProdTVector`]` ξ` induced by the metric on the manifold components
of the [`ProdManifold`](@ref)` M`.
"""
norm(M::ProductManifold, ξ::ProdTVector) = sqrt( dot(M,ξ,ξ) )
"""
    parallelTransport(M,x,ξ)
computes the product parallelTransport map on the [`ProdManifold`](@ref) and returns the corresponding [`ProdTVector`](@ref).
"""
parallelTransport(M::ProductManifold, x::ProdMPoint, y::ProdMPoint, ξ::ProdTVector) = ProdTVector( parallelTransport.(M.manifolds, getValue(x), getValue(y), getValue(ξ)) )
# Display
show(io::IO, M::ProductManifold) = print(io,string("The Product Manifold of [ ",
    join([m.abbreviation for m in M.manifolds])," ]"))
show(io::IO, p::ProdMPoint) = print(io,string("ProdM[",join(repr.( getValue(p) ),", "),"]"))
show(io::IO, ξ::ProdTVector) = print(io,String("ProdMT[", join(repr.(ξ.value),", "),"]"))
